# GNU General Public License V3
#
# Copyright (c) 2023 [Accenture - SEA Team]
#
# Development: 
# Facundo Falcone <amilcar.f.falcone@accenture.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import pandas as pd

def __open_file(path: str) -> pd.DataFrame:
    """
    This function reads an Excel file and returns a pandas DataFrame, or raises an error if the file
    cannot be loaded.
    
    :param path: The path parameter is a string that represents the file path of the Excel file that
    needs to be loaded into a pandas DataFrame
    :type path: str
    :return: a pandas DataFrame object.
    """
    try:
        df = pd.read_excel(path)
        return df
    except Exception as e:
        __SEA_messenger(f'Exception loading the file to make a dataframe: {e}', 'error')


def __create_script(df: pd.DataFrame, template: str) -> str:
    """
    This function takes a pandas DataFrame and a string template as inputs, replaces certain values in
    the template with values from the DataFrame, and returns the modified template as a string.
    
    :param df: A pandas DataFrame containing two columns: 'TECH_NAME' and 'FUNC_NAME'
    :type df: pd.DataFrame
    :param template: The template parameter is a string that represents a script template. It is used to
    create a new script by replacing certain placeholders with values from the input dataframe
    :type template: str
    :return: a string that is the updated version of the input template string with a message string
    that is generated by iterating over the rows of the input dataframe and replacing placeholders in
    the schema string with values from the dataframe. The message string is then inserted into the
    template string at a specific location.
    """
    message = ''
    first = True
    schema = '{"TECH", "FUNC"}'
    try:
        for _, row in df.iterrows():
            replaced = schema.replace('TECH', row['TECH_NAME']).replace('FUNC', row['FUNC_NAME'])
            if first:
                message += replaced
                first = False
            else: message += f", {replaced}"
        template = template\
            .replace('(#"Navigation 2", {})', f'(#"Navigation 2", {{{message}}})')\
            .replace('DATASET_NAME', DATASET_NAME)\
            .replace('TABLE_NAME', TABLE_NAME)
        __SEA_messenger('Script Created!', 'info')
    except Exception as e:
        __SEA_messenger(f'Exception getting the dataframe: {e}', 'error')
    finally:
        return template

def __create_txt_file(path: str, template: str):
    """
    This function creates a new text file at a specified path with a given template.
    
    :param path: The path parameter is a string that represents the file path where the text file will
    be created
    :type path: str
    :param template: The template parameter is a string that contains the content that will be written
    to the file
    :type template: str
    """
    try:
        with open(path, 'w') as file:
            file.writelines(template)
            __SEA_messenger(f'File created: {path}', 'success')
    except Exception as e:
        __SEA_messenger(f'Exception creating the file: {e}', 'error')

def __SEA_messenger(message: str, message_type: str) -> None:
    """
    This is a Python function that prints messages with different colors and message types (error,
    success, and information).
    
    :param message: A string containing the message to be displayed
    :type message: str
    :param message_type: The type of message being passed, which can be "Error", "Success", or "Info"
    :type message_type: str
    """
    _b_red: str = '\033[41m'
    _b_green: str = '\033[42m'
    _b_blue: str = '\033[44m'
    _f_white: str = '\033[37m'
    _no_color: str = '\033[0m'
    message_type = message_type.strip().capitalize()
    match message_type:
        case 'Error':
            print(f'{_b_red}{_f_white}> Error: {message}{_no_color}')
        case 'Success':
            print(f'{_b_green}{_f_white}> Success: {message}{_no_color}')
        case 'Info':
            print(f'{_b_blue}{_f_white}> Information: {message}{_no_color}')

def SEA_create_PBI_script(source_file_path: str, destiny_file_path: str) -> None:
    """
    This function creates a Power BI script by opening a source file, creating a script template, and
    saving the script to a destination file.
    
    :param source_file_path: The file path of the source file that contains the data to be used in the
    Power BI script
    :type source_file_path: str
    :param destiny_file_path: The file path where the new script file will be created
    :type destiny_file_path: str
    """
    template = """\
    let
        Source = GoogleBigQuery.Database([BillingProject = ProjectID, UseStorageApi = false]),
        Navigation = Source{[Name = DatalakeID]}[Data],
        #"Navigation 1" = Navigation{[Name = "DATASET_NAME", Kind = "Schema"]}[Data],
        #"Navigation 2" = #"Navigation 1"{[Name = "TABLE_NAME", Kind = "Table"]}[Data],
        #"Renamed columns" = Table.RenameColumns(#"Navigation 2", {})
    in
        #"Renamed columns"
    """
    # df = __open_file(source_file_path)
    # new_template = __create_script(df, template)
    __create_txt_file(destiny_file_path, 
        __create_script(__open_file(source_file_path), template))
    
if __name__ == '__main__':
    SOURCE_FILE_PATH = './source_pbi_fields.xlsx'
    DESTINY_FILE_PATH = './powerBI_script.vba'
    DATASET_NAME = 'sea_procurement_196220_in'
    TABLE_NAME = 'sea_sap_fieldglass_sow_in'
    SEA_create_PBI_script(SOURCE_FILE_PATH, DESTINY_FILE_PATH)
